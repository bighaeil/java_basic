Day3
#기본 클래스
자바에서 기본적으로 제공하는 클래스
/jdk5/jre/lib/rt.jar
java.lang 패키지
#String class
암시적 객체 생성 - String s1 = "ABC"; // 문자열 리터럴 (Literal, "")
클래스 영역(Class Area)의 Constant Pool 영역에 관리 - 클래스명, 메서드명, 문자열 리터럴, final 변수(상수) 등 관리
암시적 객체 생성시 이미 존재하는 문자열이면 참조변수를 받음
명시적 객체 생성 - String s2 = new String("abc");
heap 영역에 별도로 생성
#String 객체 비교
== - 객체일 경우에 '참조변수' 비교
equals() - 객체의 '내용' 비교
#String 객체의 불변적 immutable
String s1 = "ABC";
s1 = s1 + "DEF";
암시적 객체 생성으로
"ABC"에 "DEF"가 붙은 것으로 보이지만
"ABCDEF"를 메모리(Heap?)를 생성하고 ABC는 참조를 끈어서 가비지 콜렉터에 소멸 대상이 된다.
- 즉 반복해서 사용하면 내부적으로 무의미한 객체들이 생성되고 메모리가 낭비됨
#format 매서드 - JDK 5.0 - c에 printf 처럼 포맷방식을 받을 수 있음
#StringBuffer class - 내부적으로 직접 변경할 수 있는 클래스
문자열 변경이 자주 사용되는 객체에 사용
실제 용량(Buffer의 길이)보다 항상 '16문자 더 긴 공간'을 메모리로 할당 받음 - 추가, 삭제 수정을 위해
기본 용량 모두 소진하면 용량 재동으로 재설정
#split() vs StringTokenize
split() - 모든 문자 자름 - 무의미한 공간 무시하지 않음 - 실제 "" 값이 많이 생김
StringTokenize - 무의미한 공백(White Space) 무시
#Wrapper class - 기본 자료형이 객체로서 작업 수행이 가능하도록
int - Integer
char - Character
#autoboxing unboxing - 일일이 기본 자료형들을 wrapper 클래스로 변환 혹은 반대로 하는게 힘드니까
오토박싱 - 기본 자료형을 자동으로 Wrapper 클래스로 변환
언박싱 - Wrapper 클래스를 자동으로 기본 자료형으로 변환
#배열
1. 배열 선언 - char[] ch; 또는 char ch[];
2. 배열 생성 ch = new char[4];
3. 배열 초기화 ch = new char[]{'J', 'a', 'v', 'a'};
배열 복사 - System.arraycopy()
#Varargs (Variable Arguments) - ... 가변 인자 받는 거
#상속
클래스 간의 관계
- has - 객체에 다른 객체가 들어있다.
- is - 객체가 특정 객체의 능력을 가지고 있다. - 상속 관계
자바는 단일 상속
java.lang.Object - 모든 클래스들은 최상위의 클래스인 Object 클래스를 가지고 있다.
#오버라이딩 Overriding - 매서드 재정의
super 클래스(생략:부모, super)가 가지는 메서드를 sub 클래스(생략:자식, sub)가 다시 만듬 - 오버라이딩, 멤버 은페
#super
super - 현재 객체의 바로 위의 '부모 클래스'를 참조
super() - '부모 클래스의 생성자'를 의미 - 첫 행에 기재
#final - 더 이상의 확장이 불가능함을 알리는 종단(상수) - 클래스, 메서드, 변수 가능
#final 변수 - 상수(Constant) - static 처럼 '정적화'하여 여러 객체가 생성되더 1개만 존재 - 변수명 대문자
#final 메서드 - 오버라이딩으로 확장을 할 수 없게 된다. - 즉 부모만 가질 수 있음
#final 클래스 - 더 이상 상속을 허용하지 않는 종단 클래스 - 즉 무조건 자식만 가능
#추상화 abstract - 공통된 부분 추려내어 '일반화' 할 수 있도록함 - 사용할 수 있는 단계가 아닌 미완성적 개념 - 즉 혼자서 객체 생성할 수 없고 상속되서 정의해야됨
#추상 메서드 - 클래스에 추상 메서드가 하나라도 있으면 '추상 클래스'
#추상 클래스
일반 클래스와 추상 클래스 상속 - 추상 메서드를 꼭 재정의 해야함
추상 클래스와 추상클래스 상속 - 추상 메서드를 재정의 안해도됨 - 나중에 일반 클래스가 재정의 함
#추상화의 활용 - 자식 클래스들의 공통된 점을 '제한'하고 구현에 대한 '규정'을 제시
#인터페이스 - 서비스 요청에 따른 '중계자 역활' - '메뉴판' 자체가 음식을 주지 않지만 메뉴판으로 주문을 할 수 있음
implements (구현력) 예약어로 특정 인터페이스를 구현하겠다고 명시
변수 정의해도 자동으로 '상수'로 설정됨, 일반 메서드 정의해도 자동으로 '추상 메서드'로 정의
#interface 간의 상속 - 실제 구현력이 없는 인터페이스간의 상속에서는 '다중 상속'을 제공
상속을 받았다고 하지만 오버라이딩 할 수 없다. - 즉 몸(body)을 가질 수 없으니 정의 할 수도 없다. - 즉 일반 클래스는 모든 인터페이스의 추상 메서드를 오버라이딩 해야함
#다형성 - 다양한 type에 들어 갈 수 있음 - 하지만 동작은 그 타입의 메서드(혹은 그 타입 부모의)만 사용할 수 있음
interface Inter1 {}
interface Inter2 {}
interface Inter3 extends Inter1, Inter2 {}
class InterTest implements Inter3 {
    ...
    InterTest it = new InterTest();
    Inter1 it1 = it;
    Inter2 it1 = it;
    Inter3 it1 = it;
}
위 처럼 it을 인터페이스 타입으로 받을 수 있다.
#instanceof 예약어 - 왼쪽의 객체가 오른쪽에 명시한 클래스로 생성이 되었는지 형식을 비교 - return 은 boolean
#Object class - 모든 클래스들의 부모 클래스 - default 생성자 밖에 없음
#enum 열거형 (Enumerated Types)
'상수를 가지고 생성'되는 객체들을 한곳에 모아둔 '묶음' - 상수 하나 하나를 객체화
- 열거형은 하나의 클래스를 의미 - 즉 클래스 안에 enum 만들면 내부 클래스(Inner Class)로 생성
enum 안의 상수는 단순히 상수가 아니라 - java.lang 패키지에 Enum 추상 클래스를 상속받는 내부 클래스가 정의되는 것
자료형은 열거형으로 선언됨
#enum 생성자
public enum Item {
    Add(5), Del(11); // Add 아이템의 var에 5가 들어감
    private final int var;
    Item(int v) { // 생성자
        var = v;
    }
}
#내부 클래스 - 클래스 안에 또 다른 클래스가 정의 - 즉 하나의 멤버처럼 사용할 수 있음
private 로 선언됨 멤버들을 접근할 수 있음
- 내부 클래스는 외부 클래스의 모든 멤버들을 마치 자신의 멤버처럼 사용할 수 있음
- static 내부 클래스를 제외하고 다른 내부 클래스는 항상 외부 클래스를 통해야 생성할 수 있음
#내부 클래스의 종류
Member - 멤버 변수나 멤버 메서드들과 처럼 클래스가 정의된 경우
Local - 메서드 내에 클래스가 정의된 경우
Static - static 변수(클래스 변수)와 같이 클래스가 static 으로 선언된 경우
Anonymous - 참조할 수 있는 이름이 없는 경우
#Member 내부 클래스 - 어짜피 같은 클레스의 멤버니까 private 도 사용가능
#Local 내부 클래스 - 메서드가 호출될 때 생성 - 메서드의 수행력이 끝나면 지역변수와 같이 자동 소멸 - 즉 지역변수와 비슷
#Static 내부 클래스
- class Outer { static class Inner {} } 처럼 static 을 붙여서 만듬
- 외부 클래스가 static 이면 내부 클래스는 어쩔 수 없이 모조건 static 선언
- static 이 아닌 변수나 메서드들은 '필요에 의해 생성'되었다가 소멸되는 '동적인 것' - static은 반대로 '정적'임
#Anonymous(익명) 클래스 - 이름이 없는 것 - 한 번만 사용하고 버려지는 개체를 사용할 때 유용 - 이벤트의 Listener들 같이 내부 클래스 객체를 생성할때 유용