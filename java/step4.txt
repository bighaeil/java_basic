Day4
#패키지 - 클래스와 인터페이스를 하나의 단위로 묶은 것 - 관리 또는 접근을 쉽게
-소스 파일의 첫줄
#import
static import - 쉽고 빠르게 static 상수 또는 메서드 등을 호출
ex) import static java.lnag.System.out;
out.println(); // 으로 짧게 쓸 수 있음
너무 자주 사용하면 - 쓸데없이 static 영역이 남용됨
#예외 - 비정상적인 종료를 막고 정성적으로 프로그램이 계속 진행 할 수 있게
모든 예외 - 각각 객체로 인식
Throwable 클래스가 모든 예외(Exception)와 Error 의 parent 클래스
예외(Exception) - 가벼운 오류 - 프로그램적으로 처리
오류(Error) - 치명적인 오류 - JVM 에 의존하여 처리
#예외 발생시
1. try ~ catch 문으로 처리
2. throws 문으로 양도 - 호출해준 곳으로 양도 - 누군가는 처리해야함 - 양도하여 한 곳에서 처리하도록 하여 시스템의 부담을 줄이기 위해
#finally - 예외가 발생하든 하지 않든 - 무조건 수행하는 부분
#예외 강제 발생
throw new
# 사용자 정의 예외
예외를 상속 받아서 오버라이드 - 강제적인 예외 발생은 과부하가 크기 때문에 자주 사용되는 것은 결코 좋은 것이 아님
getMessage() - 간단한 메시지만
printStackTrace() - 기록된 정보나 순차적으로 메서드들의 호출된 기록 등이 출력 - 예외 발생 원인 및 경로 쉽게 파악
#단언 (Assertion) - 프로그램의 설정값들이 일치하고 있는지 검사할 수 있게 하는 것 - 프로그래머가 확고한 조건을 명시하고 그 조건에 만족 할때만 코드가 실행되도록
assert bollean식:표현식; // false 면 표현식 수행 - false를 가지면 프로그램의 수행력은 그 자리에서 상실 - 프로그램 중단 - 에러
#제네릭
컬렉션(자료구조) - 어떤 객체를 담을지 모르기 대문에 모든 자바 객체들의 base 객체(최상위 객체)인 Object 로 저장되어 관리하도록 설계되어 있다.
그래서 특정 컬렉션에 원하는 객체 자료형을 명시하여 실행전에 '컴파일 단계'에서 특정 컬렉션에 대입되는 객체를 명시
별도의 형 변환(Casting)이 필요 없이 <> 사이에 선언
자료형(Type) - <T>
요소(Element) - <E>
Key 값 - <K>
Value 값 - <V>
T s;
T[] arr;
전달된 상징적 자료형(Generic Type)이 String 형 이면
String s;
String[] arr; //대체
<>을 안쓰면 경고라인이 뜨는데 - 크게 잘못은 없지만 지금은 지원되지만 앞으로 더이상 확장하지 않을 메서드 등을 사용했다는 경고 - 예상 못하는 에러 가능성 큼 - Deprecated: 라고함
- 더 이상 확장과 개선하지 않음을 의미
#<?> 와일드카드 - 기존과 같이 모든 객체들을 저장하고 싶을 때 - 자료형이 명확하지 않기 때문에 주의
제네릭 타입 반환하는 메서드에는 인식된 객체가 아니고 'Object' 로 반환
와일드 카드 타입으로 객체를 선언하고 생성할 때는 - 반드시 생성자를 통해서 객체를 전달해야 한다.
#자바 컬렉션 프레임워크 Java Collections Framework - 객체들을 한 곳에 모아 관리 - 자료구조






